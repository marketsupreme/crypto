{"version":3,"sources":["Functions/aboutAutoScroll.js","Components/Header.js","Components/LineChart.js","Components/BarChart.js","Components/MainComponent.js","Components/Resume.js","Components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["autoScrollTo","top","$","offset","animate","scrollTop","Header","resize","forceUpdate","window","addEventListener","this","removeEventListener","className","href","onClick","auto","to","src","alt","target","rel","React","Component","techLineChart","props","state","lineData","labels","datasets","label","data","borderColor","fill","pointRadius","backgroundColor","options","legend","display","position","fontSize","fontColor","fontStyle","title","text","scales","xAxes","gridLines","scaleLabel","labelString","ticks","yAxes","animation","duration","easing","myChart","chartData","MainComponent","isTrue","setState","setInterval","getTruth","animateIn","initiallyVisible","animateOnce","BarChart","LineChart","id","animatePreScroll","Resume","onload","hide","fadeIn","Main","exact","path","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAQiBA,MALjB,WACI,IAAIC,EAAMC,IAAE,iBAAiBC,SAASF,IACtCC,IAAE,cAAcE,QAAQ,CAAEC,UAAWJ,GAAO,MC6BjCK,E,2MA5BXC,OAAS,kBAAM,EAAKC,e,mFAGhBC,OAAOC,iBAAiB,SAAUC,KAAKJ,U,6CAIvCE,OAAOG,oBAAoB,SAAUD,KAAKJ,U,+BAI1C,OACI,yBAAKM,UAAU,WACX,4CACA,kDACA,uBAAGC,KAAK,gBAAgBD,UAAU,mBAAmBE,QAASC,GAA9D,cACA,uBAAGF,KAAK,qEAAqED,UAAU,gBAAvF,YACA,kBAAC,IAAD,CAAMA,UAAU,aAAaI,GAAG,WAAhC,UAEA,yBAAKC,IAAI,oBAAoBC,IAAI,mBACjC,uBAAGL,KAAK,mDAAmDD,UAAU,wBAAwBO,OAAO,SAASC,IAAI,wBACjH,uBAAGP,KAAK,+BAA+BD,UAAU,sBAAsBO,OAAO,SAASC,IAAI,wBAC3F,uBAAGP,KAAK,uCAAuCD,UAAU,kBAAkBO,OAAO,SAASC,IAAI,6B,GAxB1FC,IAAMC,W,QCkGZC,E,YAjGX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,SAAU,CACNC,OAAQ,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC/DC,SAAU,CACN,CACIC,MAAO,MACPC,KAAM,CAAC,IAAM,IAAM,KAAM,KAAM,IAAM,IAAM,KAAM,KAAM,KAAM,MAC7DC,YAAa,kBACbC,MAAM,EACNC,YAAa,EACbC,gBAAiB,mBAErB,CACIL,MAAO,WACPC,KAAM,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACtEC,YAAa,oBACbC,MAAM,EACNC,YAAa,EACbC,gBAAiB,qBAErB,CACIL,MAAO,QACPC,KAAM,CAAC,MAAO,MAAO,GAAI,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACnEC,YAAa,qBACbC,MAAM,EACNC,YAAa,EACbC,gBAAiB,yBA5BlB,E,sEAoCf,OACI,yBAAKtB,UAAU,aACX,kBAAC,IAAD,CACAkB,KAAMpB,KAAKe,MAAMC,SACjBS,QAAS,CACLC,OAAQ,CACJC,SAAS,EACTC,SAAU,MACVX,OAAQ,CACJY,SAAU,GACVC,UAAW,QACXC,UAAW,SAGnBC,MAAO,CACHL,SAAS,EACTM,KAAM,sDACNJ,SAAU,GACVC,UAAW,0BAEfI,OAAQ,CACJC,MAAO,CAAC,CACLC,UAAW,CACRT,SAAS,GAEZU,WAAY,CACRV,SAAS,EACTW,YAAa,OACbR,UAAW,yBACXD,SAAU,IAEdU,MAAO,CACHT,UAAW,4BAGlBU,MAAO,CAAC,CACLJ,UAAW,CACRT,SAAS,GAEZU,WAAY,CACRV,SAAS,EACTW,YAAa,yBACbR,UAAW,yBACXD,SAAU,IAEdU,MAAO,CACHT,UAAW,6BAIrBW,UAAW,CACPC,SAAU,IACVC,OAAQ,sB,GA1FLhC,IAAMC,W,iBC+DnBgC,E,YA7DX,WAAY9B,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACT8B,UAAW,CACP5B,OAAQ,CAAC,SAAU,YAAa,cAAe,SAAU,YAAa,eACtEC,SAAU,CACN,CACIE,KAAM,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAC/CI,gBAAiB,CAAC,uBAAwB,uBAAwB,uBAAwB,uBAC1E,wBAAyB,uBAAwB,4BATlE,E,sEAiBf,OACI,yBAAKtB,UAAU,YACX,kBAAC,IAAD,CACAkB,KAAMpB,KAAKe,MAAM8B,UACjBpB,QAAS,CAELC,OAAQ,CACJC,SAAS,GAEbK,MAAO,CACHL,SAAS,EACTM,KAAM,gDACNJ,SAAU,GACVC,UAAW,SAEfI,OAAQ,CACJC,MAAO,CAAC,CACLC,UAAW,CACRT,SAAS,GAEZY,MAAO,CACHT,UAAW,4BAGlBU,MAAO,CAAC,CACLJ,UAAW,CACRT,SAAS,GAEZY,MAAO,CACHT,UAAW,6BAIrBW,UAAW,CACPC,SAAU,IACVC,OAAQ,sB,GAtDXhC,IAAMC,WCmIbkC,E,YA9HX,WAAYhC,GAAQ,IAAD,8BACf,4CAAMA,KAYVlB,OAAS,kBAAM,EAAKC,eAVhB,EAAKkB,MAAQ,CACTgC,QAAQ,GAJG,E,wEAUf/C,KAAKgD,SAAS,CAACD,QAAS/C,KAAKe,MAAMgC,W,0CAKlB,IAAD,OAEhBjD,OAAOC,iBAAiB,SAAUC,KAAKJ,QAEvCqD,aACI,WACI,EAAKC,aACN,O,6CAKPpD,OAAOG,oBAAoB,SAAUD,KAAKJ,U,+BAS1C,OACI,yBAAKM,UAAU,aAEX,wCACA,uJACA,qIACA,iLACA,6BAEA,yBAAKA,UAAU,aACX,yCACA,kBAAC,IAAD,CAAiBiD,UAAU,SAAST,SAAU,EAAGU,kBAAkB,EAAOC,aAAa,EAAM7D,OAAQ,KACjG,yBAAKU,UAAU,aACVF,KAAKe,MAAMgC,OAAS,kBAACO,EAAD,MAAe,kBAACC,EAAD,QAG5C,wBAAIC,GAAG,kBAGX,kBAAC,IAAD,CAAiBL,UAAU,eAAeT,SAAU,EAAGU,kBAAkB,EAAOC,aAAa,EAAMI,kBAAkB,EAAOjE,OAAQ,KAChI,wCACA,yBAAKU,UAAU,YAEX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,aACX,yBAAKK,IAAI,iBAAiBC,IAAI,iBAItC,yBAAKN,UAAU,mBACX,yBAAKA,UAAU,WACX,kFACA,oDACA,4nBAOJ,yBAAKA,UAAU,eACX,yBAAKK,IAAI,uBAAuBC,IAAI,mBAI5C,yBAAKN,UAAU,kBACX,yBAAKA,UAAU,WACX,0EACA,4DACA,qcAMJ,yBAAKA,UAAU,iBACf,yBAAKK,IAAI,qBAAqBC,IAAI,kCAItC,yBAAKN,UAAU,mBACX,yBAAKA,UAAU,WACX,uDACA,yDACA,+bAQR,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,WACX,mFACA,6DACA,ugB,GAlHJS,IAAMC,WCmBnB8C,E,4LAnBP5D,OAAO6D,OAASpE,KAAE,WACdA,IAAE,OAAOqE,OACTrE,IAAE,OAAOsE,OAAO,U,+BAKpB,OACI,yBAAK3D,UAAU,aACX,sCACA,6BACA,0CACA,wCAAiB,kD,GAfZS,IAAMC,WCqBVkD,EAlBJ,WAET,OACE,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,WAChB,kBAAC,EAAD,SCHKC,E,iLARP,OACI,6BACI,kBAAC,EAAD,W,GAJEtD,IAAMC,WCQJsD,QACW,cAA7BpE,OAAOqE,SAASC,UAEe,UAA7BtE,OAAOqE,SAASC,UAEhBtE,OAAOqE,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,IAAD,KACE,kBAAC,EAAD,OAECC,SAASC,eAAe,SDsHzB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b419df18.chunk.js","sourcesContent":["import $ from \"jquery\";\r\n\r\n\r\nfunction autoScrollTo() {\r\n    let top = $(\"#timelineInfo\").offset().top;\r\n    $(\"html, body\").animate({ scrollTop: top }, 2000);\r\n  }\r\n\r\n  export default autoScrollTo;","import React from \"react\";\r\nimport auto from \"../Functions/aboutAutoScroll\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Header extends React.Component {\r\n\r\n    resize = () => this.forceUpdate()\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', this.resize)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.resize)\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <div className='sidenav'>\r\n                <h2> Milan Dean </h2>\r\n                <h3>milan387@gmail.com</h3>\r\n                <a href=\"#timelineInfo\" className=\"timelineFunction\" onClick={auto}> Timeline </a>\r\n                <a href=\"https://github.com/MilanDean/Data-Analysis-and-Interactive-Reports\" className=\"analysisLink\">Projects</a>\r\n                <Link className=\"resumeLink\" to=\"/resume\">Resume</Link>\r\n\r\n                <img src=\"/milanDefault.jpg\" alt=\"Milan Headshot\" />\r\n                <a href=\"https://www.linkedin.com/in/milan-dean-6b625a98/\" className=\"fa fa-linkedin-square\" target=\"_blank\" rel=\"noopener noreferrer\"></a>\r\n                <a href=\"https://github.com/MilanDean\" className=\"fa fa-github-square\" target=\"_blank\" rel=\"noopener noreferrer\"></a>\r\n                <a href=\"https://www.instagram.com/milandean/\" className=\"fa fa-instagram\" target=\"_blank\" rel=\"noopener noreferrer\"></a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import {Line} from \"react-chartjs-2\";\r\nimport React from \"react\";\r\n\r\nclass techLineChart extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lineData: {\r\n                labels: [2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018],\r\n                datasets: [\r\n                    {\r\n                        label: \"AMD\",\r\n                        data: [5.40, 6.50, 6.57, 5.42, 5.30, 5.50, 3.99, 4.32, 5.25, 6.48],\r\n                        borderColor: \"rgb(13, 13, 13)\",\r\n                        fill: true,\r\n                        pointRadius: 2,\r\n                        backgroundColor: \"rgb(13, 13, 13)\"\r\n                    },\r\n                    {\r\n                        label: \"Qualcomm\",\r\n                        data: [10.39, 10.98, 14.96, 19.12, 24.87, 26.49, 25.28, 23.55, 22.26, 22.61],\r\n                        borderColor: \"rgb(255, 153, 51)\",\r\n                        fill: true,\r\n                        pointRadius: 2,\r\n                        backgroundColor: \"rgb(255, 153, 51)\"\r\n                    },\r\n                    {\r\n                        label: \"Intel\",\r\n                        data: [35.13, 43.62, 54, 53.34, 52.71, 55.87, 55.36, 59.39, 62.76, 70.85],\r\n                        borderColor: \"rgb(102, 179, 255)\",\r\n                        fill: true,\r\n                        pointRadius: 2,\r\n                        backgroundColor: \"rgb(102, 179, 255)\"\r\n                    }\r\n                ]\r\n            }\r\n        } \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='lineChart'>\r\n                <Line\r\n                data={this.state.lineData}\r\n                options={{\r\n                    legend: {\r\n                        display: true,\r\n                        position: \"top\",\r\n                        labels: {\r\n                            fontSize: 14,\r\n                            fontColor: 'White',\r\n                            fontStyle: \"Bold\"\r\n                        }\r\n                    },\r\n                    title: {\r\n                        display: true,\r\n                        text: \"Comparison of Semiconductor Company Annual Revenues\",\r\n                        fontSize: 20,\r\n                        fontColor: \"rgba(255, 255, 255, 1)\"\r\n                    },\r\n                    scales: {\r\n                        xAxes: [{\r\n                           gridLines: {\r\n                              display: false\r\n                           },\r\n                           scaleLabel: {\r\n                               display: true,\r\n                               labelString: 'Year',\r\n                               fontColor: \"rgba(255, 255, 255, 1)\",\r\n                               fontSize: 14\r\n                           },\r\n                           ticks: {\r\n                               fontColor: \"rgba(255, 255, 255, 1)\"\r\n                           }\r\n                        }],\r\n                        yAxes: [{\r\n                           gridLines: {\r\n                              display: false\r\n                           },\r\n                           scaleLabel: {\r\n                               display: true,\r\n                               labelString: 'Revenue (USD Billions)',\r\n                               fontColor: \"rgba(255, 255, 255, 1)\",\r\n                               fontSize: 14\r\n                           },\r\n                           ticks: {\r\n                               fontColor: \"rgba(255, 255, 255, 1)\"\r\n                           }\r\n                        }]\r\n                     },\r\n                     animation: {\r\n                         duration: 2000,\r\n                         easing: 'easeInQuad'\r\n                     }\r\n                }}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default techLineChart;","import {Bar} from 'react-chartjs-2';\r\nimport React from \"react\";\r\n\r\nclass myChart extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            chartData: {\r\n                labels: ['Boston', 'Worcester', 'Springfield', 'Lowell', 'Cambridge', 'New Bedford'],\r\n                datasets: [\r\n                    {\r\n                        data: [617594, 181045, 153060, 106519, 105162, 95072],\r\n                        backgroundColor: ['rgba(255, 99, 132, 1', 'rgba(54, 162, 235, 1', 'rgba(255, 206, 86, 1', 'rgba(75, 192, 192, 1',\r\n                                        'rgba(153, 102, 255, 1', 'rgba(255, 159, 64, 1', 'rgba(255, 99, 132, 1']\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='barChart'>\r\n                <Bar\r\n                data={this.state.chartData}\r\n                options={{\r\n\r\n                    legend: {\r\n                        display: false\r\n                    },\r\n                    title: {\r\n                        display: true,\r\n                        text: 'Largest Cities in Massachusetts by Population',\r\n                        fontSize: 20,\r\n                        fontColor: 'White'\r\n                    },\r\n                    scales: {\r\n                        xAxes: [{\r\n                           gridLines: {\r\n                              display: false,\r\n                           },\r\n                           ticks: {\r\n                               fontColor: \"rgba(255, 255, 255, 1)\"\r\n                           }\r\n                        }],\r\n                        yAxes: [{\r\n                           gridLines: {\r\n                              display: false,\r\n                           },\r\n                           ticks: {\r\n                               fontColor: \"rgba(255, 255, 255, 1)\"\r\n                           }\r\n                        }]\r\n                     },\r\n                     animation: {\r\n                         duration: 2000,\r\n                         easing: \"easeInQuad\"\r\n                     },\r\n                }}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default myChart;","import React from \"react\";\r\nimport LineChart from \"./LineChart\";\r\nimport ScrollAnimation from \"react-animate-on-scroll\";\r\nimport BarChart from \"./BarChart\";\r\n// import Background from '../Images/skybackground.jpg'\r\n\r\nclass MainComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isTrue: false\r\n        };\r\n\r\n    }\r\n\r\n    getTruth() {\r\n        this.setState({isTrue: !this.state.isTrue});\r\n    }\r\n\r\n    resize = () => this.forceUpdate()\r\n\r\n    componentDidMount() {\r\n\r\n        window.addEventListener('resize', this.resize)\r\n\r\n        setInterval(\r\n            () => {\r\n                this.getTruth()\r\n            }, 10000\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.resize)\r\n      }\r\n\r\n    render() {\r\n\r\n        // const style = {\r\n        //     backgroundImage: `url(${Background})`,\r\n        //     minHeight: '100%'\r\n        // }\r\n        return (\r\n            <div className=\"mainRight\">\r\n\r\n                <h2>About Me</h2>\r\n                <p>Hello my name is Milan and I am an aspiring Software Engineer with a passion for data science and quantitative analysis.</p>\r\n                <p>Currently, I'm in school studying mathematical statistics, and interning at Intel as a Data Scientist.</p>\r\n                <p>This website is continually in development, in an attempt to simultaneously test front and back-end tools or methods while sharing my progression.</p>\r\n                <hr />\r\n\r\n                <div className=\"navButton\">\r\n                    <h2>Analytics</h2>\r\n                    <ScrollAnimation animateIn='fadeIn' duration={3} initiallyVisible={false} animateOnce={true} offset={500}>\r\n                        <div className='chartData'>\r\n                            {this.state.isTrue ? <BarChart /> : <LineChart />}\r\n                        </div>\r\n                    </ScrollAnimation>\r\n                    <hr id=\"timelineInfo\" />\r\n                </div>\r\n\r\n                <ScrollAnimation animateIn='bounceInLeft' duration={3} initiallyVisible={false} animateOnce={true} animatePreScroll={false} offset={500}>\r\n                    <h2>Timeline</h2>\r\n                    <div className=\"timeline\">\r\n\r\n                        <div className=\"container left\">\r\n                            <div className=\"intelLogo\">\r\n                                <img src=\"/intelLogo.jpg\" alt=\"intel logo\"/>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"container right\">\r\n                            <div className=\"content\">\r\n                                <h2>Data Scientist, iVE Validation Engineering - Intel</h2>\r\n                                <span>Jan 2020 - Present</span>\r\n                                <p>As one of the iVE Validation Data Scientists, I play a key role in the creation of a Scalable ETL pipeline, allowing \r\n                                    us to view key components of projects that were otherwise located in different databases across different servers. Once the data of interest is \r\n                                    consolidated into one general location, I use mathematical and statistical methods to extract insights to help increase \r\n                                    spend efficiencies across a line of products. Once these insights have been interpreted, ad hoc reports are generated to enable users\r\n                                    across departments to make key business decisions regarding projects they're involved in.\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"pythonImage\">\r\n                                <img src=\"/pythonStockCode.jpg\" alt=\"OOP ETL Code\"/>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"container left\">\r\n                            <div className=\"content\">\r\n                                <h2>Software Engineering Intern - Waldo Photos</h2>\r\n                                <span>August 2019 - January 2020</span>\r\n                                <p>When I joined this AI tech startup back in August, I joined the software engineering team.\r\n                                    Some of the work included building a scalable ETL pipeline for our revenue stream, run ad-hoc queries in Metabase using\r\n                                    PostgreSQL to gain insight on sales trends, and deploy a GUI program using Python with a Model-View-Controller \r\n                                    software archtecture pattern to assist the Operations team with day to day common support requests.\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"monkediaImage\">\r\n                            <img src=\"/monkediaGraph.jpg\" alt=\"Social Media Sales Analysis\"/>\r\n                        </div>\r\n                        </div>\r\n\r\n                        <div className=\"container right\">\r\n                            <div className=\"content\">\r\n                                <h2>Data Analyst - Monkedia</h2>\r\n                                <span>July 2018 - August 2019</span>\r\n                                <p>While managing paid social media campaigns on Facebook Ads Manager, frequently I would optimize how we ran ads and promoted\r\n                                    small business. Some projects I spearheaded included running A/B split testing of campaigns, deploy time series models to forecast\r\n                                    sales, developing an ETL process around visualizing inventory management, and creating interactive dashboards monitoring \r\n                                    KPI metrics with Microsoft's Power BI.\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div className=\"container left\">\r\n                            <div className=\"content\">\r\n                                <h2>Research Assistant - UT Southwestern Medical Center</h2>\r\n                                <span>January 2017 - January 2018</span>\r\n                                <p>Upon completion of my neurobiology degree I went into research, where I developed my passion for data analysis and data science.\r\n                                    Doing research in the field of medical neuroscience and performing complex experiments to analyze a relationship between certain metabolic\r\n                                    protein complexes, ubiquitin ligases, and brain encephelopathy allowed me to help write and publish two research papers - one of which was published in the \r\n                                    Proceedings of the National Academy of Sciences (PNAS).\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n                </ScrollAnimation>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainComponent;","import React from 'react';\r\nimport $ from \"jquery\";\r\n\r\nclass Resume extends React.Component {\r\n\r\n    componentDidMount() {\r\n        window.onload = $(function() {\r\n            $(\"div\").hide();\r\n            $(\"div\").fadeIn(2000);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"divResume\">\r\n                <h1>Resume</h1>\r\n                <div>\r\n                <h2>Milan Dean</h2>\r\n                <h3>LinkedIn</h3><p>Linkedin Link</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Resume;","import React from 'react';\r\nimport {Route, BrowserRouter as Router } from 'react-router-dom';\r\nimport Header from './Header';\r\nimport MainComponent from './MainComponent';\r\nimport Resume from './Resume';\r\n\r\nconst Main = () => {\r\n  \r\n    return (\r\n      <Router>\r\n        \r\n        <Route exact path='/'>\r\n          <Header />\r\n          <MainComponent />\r\n        </Route>\r\n\r\n        <Route exact path='/resume'>\r\n          <Resume />\r\n        </Route>\r\n\r\n        </Router>\r\n    );\r\n  }\r\n  \r\n  export default Main;","import './App.css';\nimport React from \"react\";\nimport Main from './Components/MainPage';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                <Main />\n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render((\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n    ), document.getElementById('root')\n  );\n\nserviceWorker.unregister();\n"],"sourceRoot":""}